<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoordinateSharp</name>
    </assembly>
    <members>
        <member name="M:CoordinateSharp.MeeusTables.Moon_Periodic_Er(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns Moon Periodic Value Er
            </summary>
            <param name="D">Moon's mean elongation</param>
            <param name="M">Sun's mean anomaly</param>
            <param name="N">Moon's mean anomaly</param>
            <param name="F">Moon's argument of latitude</param>
            <param name="T">Dynamic time</param>
            <returns>Er</returns>
        </member>
        <member name="M:CoordinateSharp.MeeusTables.Moon_Periodic_El(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns Moon Periodic Value El
            </summary>
            <param name="L">Moon's mean longitude</param>
            <param name="D">Moon's mean elongation</param>
            <param name="M">Sun's mean anomaly</param>
            <param name="N">Moon's mean anomaly</param>
            <param name="F">Moon's argument of latitude</param>
            <param name="T">Dynamic time</param>
            <returns>El</returns>
        </member>
        <member name="M:CoordinateSharp.MeeusTables.Moon_Periodic_Eb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns Moon Periodic Value Eb
            </summary>
            <param name="L">Moon's mean longitude</param>
            <param name="D">Moon's mean elongation</param>
            <param name="M">Sun's mean anomaly</param>
            <param name="N">Moon's mean anomaly</param>
            <param name="F">Moon's argument of latitude</param>
            <param name="T">Dynamic time</param>
            <returns>Eb</returns>
        </member>
        <member name="M:CoordinateSharp.MeeusTables.ApogeeTermsA(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sum of Apogee Terms from Jean Meeus Astronomical Algorithms Table 50.A
            </summary>
            <param name="D">Moom's mean elongation at time JDE</param>
            <param name="M">Sun's mean anomaly</param>
            <param name="F">Moon's arguement f latitude</param>
            <param name="T">Time in Julian centuries since epoch 2000</param>
            <returns>double</returns>
        </member>
        <member name="M:CoordinateSharp.MeeusTables.PerigeeTermsA(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sum of Perigee Terms from Jean Meeus Astronomical Algorithms Table 50.A
            </summary>
            <param name="D">Moom's mean elongation at time JDE</param>
            <param name="M">Sun's mean anomaly</param>
            <param name="F">Moon's arguement f latitude</param>
            <param name="T">Time in Julian centuries since epoch 2000</param>
            <returns>double</returns>
        </member>
        <member name="M:CoordinateSharp.MeeusTables.ApogeeTermsB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sum of Apogee Terms from Jean Meeus Astronomical Algorithms Table 50.B
            </summary>
            <param name="D">Moom's mean elongation at time JDE</param>
            <param name="M">Sun's mean anomaly</param>
            <param name="F">Moon's arguement f latitude</param>
            <param name="T">Time in Julian centuries since epoch 2000</param>
            <returns>double</returns>
        </member>
        <member name="M:CoordinateSharp.MeeusTables.PerigeeTermsB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sum of Perigee Terms from Jean Meeus Astronomical Algorithms Table 50.B
            </summary>
            <param name="D">Moom's mean elongation at time JDE</param>
            <param name="M">Sun's mean anomaly</param>
            <param name="F">Moon's arguement f latitude</param>
            <param name="T">Time in Julian centuries since epoch 2000</param>
            <returns>double</returns>
        </member>
        <member name="T:CoordinateSharp.CelestialStatus">
            <summary>
            Used to display a celestial condition for a specified date.
            </summary>
        </member>
        <member name="F:CoordinateSharp.CelestialStatus.RiseAndSet">
            <summary>
            Celestial body rises and sets on the set day.
            </summary>
        </member>
        <member name="F:CoordinateSharp.CelestialStatus.DownAllDay">
            <summary>
            Celestial body is down all day
            </summary>
        </member>
        <member name="F:CoordinateSharp.CelestialStatus.UpAllDay">
            <summary>
            Celestial body is up all day
            </summary>
        </member>
        <member name="F:CoordinateSharp.CelestialStatus.NoRise">
            <summary>
            Celestial body rises, but does not set on the set day
            </summary>
        </member>
        <member name="F:CoordinateSharp.CelestialStatus.NoSet">
            <summary>
            Celestial body sets, but does not rise on the set day
            </summary>
        </member>
        <member name="T:CoordinateSharp.MoonDistanceType">
            <summary>
             moon perigee or apogee indicator
            </summary>
        </member>
        <member name="F:CoordinateSharp.MoonDistanceType.Perigee">
            <summary>
            Moon's perigee
            </summary>
        </member>
        <member name="F:CoordinateSharp.MoonDistanceType.Apogee">
            <summary>
            Moon's apogee
            </summary>
        </member>
        <member name="T:CoordinateSharp.MoonIllum">
            <summary>
            Moon Illumination Information
            </summary>
        </member>
        <member name="P:CoordinateSharp.MoonIllum.Fraction">
            <summary>
            Moon's fraction
            </summary>
        </member>
        <member name="P:CoordinateSharp.MoonIllum.Angle">
            <summary>
            Moon's Angle
            </summary>
        </member>
        <member name="P:CoordinateSharp.MoonIllum.Phase">
            <summary>
            Moon's phase
            </summary>
        </member>
        <member name="P:CoordinateSharp.MoonIllum.PhaseName">
            <summary>
            Moon's phase name for the specified day
            </summary>
        </member>
        <member name="T:CoordinateSharp.PerigeeApogee">
            <summary>
            Stores Perigee or Apogee values
            </summary>
        </member>
        <member name="M:CoordinateSharp.PerigeeApogee.#ctor(System.DateTime,System.Double,CoordinateSharp.Distance)">
            <summary>
            Initializes a Perigee or Apogee object
            </summary>
            <param name="d">Date of Event</param>
            <param name="p">Horizontal Parallax</param>
            <param name="dist">Distance</param>
        </member>
        <member name="P:CoordinateSharp.PerigeeApogee.Date">
            <summary>
            Date of event.
            </summary>
        </member>
        <member name="P:CoordinateSharp.PerigeeApogee.HorizontalParallax">
            <summary>
            Horizontal Parallax.
            </summary>
        </member>
        <member name="P:CoordinateSharp.PerigeeApogee.Distance">
            <summary>
            Moon's distance at event.
            </summary>
        </member>
        <member name="T:CoordinateSharp.JulianConversions">
            <summary>
            Julian date conversions
            </summary>
        </member>
        <member name="M:CoordinateSharp.JulianConversions.GetJulian(System.DateTime)">
            <summary>
            Returns JD.
            Meeus Ch 7.
            </summary>
            <param name="d">DateTime</param>
            <returns>JDE</returns>
        </member>
        <member name="M:CoordinateSharp.JulianConversions.GetJulian_Epoch2000(System.DateTime)">
            <summary>
            Returns JD from epoch 2000.
            Meeus Ch 7.
            </summary>
            <param name="d">DateTime</param>
            <returns>JDE</returns>
        </member>
        <member name="M:CoordinateSharp.JulianConversions.GetJulian_Epoch1970(System.DateTime)">
            <summary>
            Returns JD from epoch 1970.
            Meeus Ch 7.
            </summary>
            <param name="d">DateTime</param>
            <returns>JDE</returns>
        </member>
        <member name="M:CoordinateSharp.JulianConversions.GetDate_FromJulian(System.Double)">
            <summary>
            Returns date from Julian
            Meeus ch. 7
            </summary>
            <param name="j">Julian</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:CoordinateSharp.JulianConversions.GetDate_FromJulian_Epoch2000(System.Double)">
            <summary>
            Returns date from Julian based on epoch 2000
            Meeus ch. 7
            </summary>
            <param name="j">Julian</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:CoordinateSharp.JulianConversions.GetDate_FromJulian_Epoch1970(System.Double)">
            <summary>
            Returns date from Julian based on epoch 1970
            Meeus ch. 7
            </summary>
            <param name="j">Julian</param>
            <returns>DateTime</returns>
        </member>
        <member name="T:CoordinateSharp.Perigee">
            <summary>
            Contains last and next perigee
            </summary>
        </member>
        <member name="M:CoordinateSharp.Perigee.#ctor(CoordinateSharp.PerigeeApogee,CoordinateSharp.PerigeeApogee)">
            <summary>
            Initializes an Perigee object.
            </summary>
            <param name="last"></param>
            <param name="next"></param>
        </member>
        <member name="P:CoordinateSharp.Perigee.LastPerigee">
            <summary>
            Last perigee
            </summary>
        </member>
        <member name="P:CoordinateSharp.Perigee.NextPerigee">
            <summary>
            Next perigee
            </summary>
        </member>
        <member name="T:CoordinateSharp.Apogee">
            <summary>
            Contains last and next apogee
            </summary>
        </member>
        <member name="M:CoordinateSharp.Apogee.#ctor(CoordinateSharp.PerigeeApogee,CoordinateSharp.PerigeeApogee)">
            <summary>
            Initializes an Apogee object.
            </summary>
            <param name="last"></param>
            <param name="next"></param>
        </member>
        <member name="P:CoordinateSharp.Apogee.LastApogee">
            <summary>
            Last apogee
            </summary>
        </member>
        <member name="P:CoordinateSharp.Apogee.NextApogee">
            <summary>
            Next apogee
            </summary>
        </member>
        <member name="T:CoordinateSharp.AstrologicalSigns">
            <summary>
            Astrological Signs
            </summary>
        </member>
        <member name="P:CoordinateSharp.AstrologicalSigns.MoonName">
            <summary>
            Astrological Zodiac Sign
            </summary>
        </member>
        <member name="P:CoordinateSharp.AstrologicalSigns.MoonSign">
            <summary>
            Astrological Moon Sign
            </summary>
        </member>
        <member name="P:CoordinateSharp.AstrologicalSigns.ZodiacSign">
            <summary>
            Astrological Zodiac Sign
            </summary>
        </member>
        <member name="T:CoordinateSharp.AdditionalSolarTimes">
            <summary>
            Additional Solar Time Information
            </summary>
        </member>
        <member name="M:CoordinateSharp.AdditionalSolarTimes.#ctor">
            <summary>
            Create an AdditionalSolarTimes object.
            </summary>
        </member>
        <member name="P:CoordinateSharp.AdditionalSolarTimes.CivilDawn">
            <summary>
            Returns Civil Dawn Time
            </summary>
        </member>
        <member name="P:CoordinateSharp.AdditionalSolarTimes.CivilDusk">
            <summary>
            Returns Civil Dusk Time
            </summary>
        </member>
        <member name="P:CoordinateSharp.AdditionalSolarTimes.NauticalDawn">
            <summary>
            Returns Nautical Dawn Time
            </summary>
        </member>
        <member name="P:CoordinateSharp.AdditionalSolarTimes.NauticalDusk">
            <summary>
            Returns Nautical Dusk Time
            </summary>
        </member>
        <member name="P:CoordinateSharp.AdditionalSolarTimes.AstronomicalDawn">
            <summary>
            Returns Astronomical Dawn Time
            </summary>
        </member>
        <member name="P:CoordinateSharp.AdditionalSolarTimes.AstronomicalDusk">
            <summary>
            Returns Astronomical Dusk Time
            </summary>
        </member>
        <member name="P:CoordinateSharp.AdditionalSolarTimes.SunriseBottomDisc">
            <summary>
            Returns the time when the bottom of the solar disc touches the horizon after sunrise
            </summary>
        </member>
        <member name="P:CoordinateSharp.AdditionalSolarTimes.SunsetBottomDisc">
            <summary>
            Returns the time when the bottom of the solar disc touches the horizon before sunset
            </summary>
        </member>
        <member name="T:CoordinateSharp.SolarEclipse">
            <summary>
            Class containing solar eclipse information
            </summary>
        </member>
        <member name="M:CoordinateSharp.SolarEclipse.#ctor">
            <summary>
            Initialize a SolarEclipse object
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipse.LastEclipse">
            <summary>
            Details about the previous solar eclipse
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipse.NextEclipse">
            <summary>
            Details about the next solar eclipse
            </summary>
        </member>
        <member name="T:CoordinateSharp.LunarEclipse">
            <summary>
            Class containing lunar eclipse information
            </summary>
        </member>
        <member name="M:CoordinateSharp.LunarEclipse.#ctor">
            <summary>
            Initialize a LunarEclipse object
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipse.LastEclipse">
            <summary>
            Details about the previous lunar eclipse
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipse.NextEclipse">
            <summary>
            Details about the next lunar eclipse
            </summary>
        </member>
        <member name="T:CoordinateSharp.SolarEclipseDetails">
            <summary>
            Class containing specific solar eclipse information
            </summary>
        </member>
        <member name="M:CoordinateSharp.SolarEclipseDetails.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initialize a SolarEclipseDetails object
            </summary>
            <param name="values">Solar Eclipse String Values</param>
        </member>
        <member name="M:CoordinateSharp.SolarEclipseDetails.#ctor">
            <summary>
            Initialize an empty SolarEclipseDetails object
            </summary>
        </member>
        <member name="M:CoordinateSharp.SolarEclipseDetails.Adjust_Dates">
            <summary>
            JS Eclipse Calc formulas didn't account for Z time calculation.
            Iterate through and adjust Z dates where eclipse is passed midnight.
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.HasEclipseData">
            <summary>
            Determine if the SolarEclipseDetails object has been populated
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.Date">
            <summary>
            Date of solar eclipse
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.Type">
            <summary>
            Solar eclipse type
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.PartialEclispeBegin">
            <summary>
            DateTime when the partial eclipse begins
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.AorTEclipseBegin">
            <summary>
            DateTime when an Annular or Total eclipse begins (if applicable)
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.MaximumEclipse">
            <summary>
            DateTime when eclipse is at Maximum
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.AorTEclipseEnd">
            <summary>
            DateTime when the Annular or Total eclipse ends (if applicable)
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.PartialEclispeEnd">
            <summary>
            DateTime when the partial elipse ends
            </summary>
        </member>
        <member name="P:CoordinateSharp.SolarEclipseDetails.AorTDuration">
            <summary>
            Duration of Annular or Total eclipse (if applicable)
            </summary>
        </member>
        <member name="M:CoordinateSharp.SolarEclipseDetails.ToString">
            <summary>
            Solat eclipse default string
            </summary>
            <returns>Solar eclipse base date string</returns>
        </member>
        <member name="T:CoordinateSharp.LunarEclipseDetails">
            <summary>
            Class containing specific lunar eclipse information
            </summary>
        </member>
        <member name="M:CoordinateSharp.LunarEclipseDetails.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initialize a LunarEclipseDetails object
            </summary>
            <param name="values">Lunar Eclipse String Values</param>
        </member>
        <member name="M:CoordinateSharp.LunarEclipseDetails.#ctor">
            <summary>
            Initialize an empty LunarEclipseDetails object
            </summary>
        </member>
        <member name="M:CoordinateSharp.LunarEclipseDetails.Adjust_Dates">
            <summary>
            JS Eclipse Calc formulas didn't account for Z time calculation.
            Iterate through and adjust Z dates where eclipse is passed midnight.
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.HasEclipseData">
            <summary>
            Determine if the LunarEclipseDetails object has been populated
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.Date">
            <summary>
            Date of lunar eclipse
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.Type">
            <summary>
            Lunar eclipse type
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.PenumbralEclipseBegin">
            <summary>
            DateTime when the penumbral eclipse begins
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.PartialEclispeBegin">
            <summary>
            DateTime when the partial eclipse begins (if applicable)
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.TotalEclipseBegin">
            <summary>
            DateTime when Total eclipse begins (if applicable)
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.MidEclipse">
            <summary>
            DateTime when eclipse is at Mid
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.TotalEclipseEnd">
            <summary>
            DateTime when Total eclipse ends (if applicable)
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.PartialEclispeEnd">
            <summary>
            DateTime when the partial elipse ends (if applicable)
            </summary>
        </member>
        <member name="P:CoordinateSharp.LunarEclipseDetails.PenumbralEclispeEnd">
            <summary>
            DateTime when the penumbral elipse ends
            </summary>
        </member>
        <member name="M:CoordinateSharp.LunarEclipseDetails.ToString">
            <summary>
            Lunar eclipse default string
            </summary>
            <returns>Lunar eclipse base date string</returns>
        </member>
        <member name="T:CoordinateSharp.SolarEclipseType">
            <summary>
            Solar eclipse type
            </summary>
        </member>
        <member name="F:CoordinateSharp.SolarEclipseType.Partial">
            <summary>
            Partial Eclipse
            </summary>
        </member>
        <member name="F:CoordinateSharp.SolarEclipseType.Annular">
            <summary>
            Annular Eclipse
            </summary>
        </member>
        <member name="F:CoordinateSharp.SolarEclipseType.Total">
            <summary>
            Total Eclipse...of the heart...
            </summary>
        </member>
        <member name="T:CoordinateSharp.LunarEclipseType">
            <summary>
            Lunar eclipse type
            </summary>
        </member>
        <member name="F:CoordinateSharp.LunarEclipseType.Penumbral">
            <summary>
            Penumbral Eclipse
            </summary>
        </member>
        <member name="F:CoordinateSharp.LunarEclipseType.Partial">
            <summary>
            Partial Eclipse
            </summary>
        </member>
        <member name="F:CoordinateSharp.LunarEclipseType.Total">
            <summary>
            Total Eclipse...of the heart...
            </summary>
        </member>
        <member name="T:CoordinateSharp.Celestial">
            <summary>
            The main class for handling location based celestial information.
            </summary>
            <remarks>
            This class can calculate various pieces of solar and lunar data, based on location and date
            </remarks>
        </member>
        <member name="M:CoordinateSharp.Celestial.#ctor">
            <summary>
            Creates an empty Celestial.
            </summary>
        </member>
        <member name="M:CoordinateSharp.Celestial.#ctor(System.Double,System.Double,System.DateTime)">
            <summary>
            Creates a Celestial based on a location and specified date
            </summary>
            <param name="lat">latitude</param>
            <param name="longi">longitude</param>
            <param name="geoDate">DateTime (UTC)</param>
        </member>
        <member name="M:CoordinateSharp.Celestial.LoadCelestial(CoordinateSharp.Coordinate)">
            <summary>
            Creates a Celestial based on a location and date in the provided Coordinate.
            </summary>
            <param name="c">Coordinate</param>
            <returns>Celestial</returns>
        </member>
        <member name="M:CoordinateSharp.Celestial.Celestial_LocalTime(CoordinateSharp.Coordinate,System.Double)">
            <summary>
            Converts Celestial values to local times.
            </summary>
            <param name="c">Coordinate</param>
            <param name="offset">UTC offset</param>
            <returns></returns>
        </member>
        <member name="M:CoordinateSharp.Celestial.Local_Convert(CoordinateSharp.Coordinate,System.Double)">
            <summary>
            In place time slip
            </summary>
            <param name="c">Coordinate</param>
            <param name="offset">hour offset</param>
        </member>
        <member name="P:CoordinateSharp.Celestial.SunSet">
            <summary>
            Sunset time.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.SunRise">
            <summary>
            Sunrise time.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.MoonSet">
            <summary>
            Moonset time.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.MoonRise">
            <summary>
            Moonrise time.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.SunAltitude">
            <summary>
            Sun altitude in degrees (E of N).
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.SunAzimuth">
            <summary>
            Sun azimuth in degrees (E of N).
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.MoonAltitude">
            <summary>
            Moon altitude in degrees (corrected for parallax and refraction).
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.MoonAzimuth">
            <summary>
            Moon azimuth in degrees (E of N).
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.MoonDistance">
            <summary>
            Estimated moon distance from the earth.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.SunCondition">
            <summary>
            Sun's Condition based on the provided date.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.MoonCondition">
            <summary>
            Moon's condition based on the provided date.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.IsSunUp">
            <summary>
            Determine if the sun is currently up, based on sunset and sunrise time at the provided location and date.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.IsMoonUp">
            <summary>
            Determine if the moon is currently up, based on moonset and moonrise time at the provided location and date.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.MoonIllum">
            <summary>
            Moon ilumination details based on the provided date.
            </summary>
            <remarks>
            Contains phase, phase name, fraction and angle
            </remarks>
        </member>
        <member name="P:CoordinateSharp.Celestial.Perigee">
            <summary>
            Moons perigee details based on the provided date.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.Apogee">
            <summary>
            Moons apogee details based on the provided date.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.AdditionalSolarTimes">
            <summary>
            Additional solar event times based on the provided date and location.
            </summary>
            <remarks>Contains civil and nautical dawn and dusk times.</remarks>
        </member>
        <member name="P:CoordinateSharp.Celestial.AstrologicalSigns">
            <summary>
            Astrological signs based on the provided date.
            </summary>
            <remarks>
            Contains zodiac, moon sign and moon name during full moon events
            </remarks>
        </member>
        <member name="P:CoordinateSharp.Celestial.SolarEclipse">
            <summary>
            Returns a SolarEclipse.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Celestial.LunarEclipse">
            <summary>
            Returns a LunarEclipse.
            </summary>
        </member>
        <member name="M:CoordinateSharp.Celestial.CalculateCelestialTime(System.Double,System.Double,System.DateTime)">
            <summary>
            Calculates all celestial data. Coordinates will notify as changes occur
            </summary>
            <param name="lat">Decimal format latitude</param>
            <param name="longi">Decimal format longitude</param>
            <param name="date">Geographic DateTime</param>
        </member>
        <member name="M:CoordinateSharp.Celestial.CalculateCelestialTimes(System.Double,System.Double,System.DateTime)">
            <summary>
            Calculate celestial data based on lat/long and date.
            </summary>
            <param name="lat">Decimal format latitude</param>
            <param name="longi">Decimal format longitude</param>
            <param name="date">Geographic DateTime</param>
            <returns>Fully populated Celestial object</returns>
        </member>
        <member name="M:CoordinateSharp.Celestial.CalculateSunData(System.Double,System.Double,System.DateTime)">
            <summary>
            Calculate sun data based on lat/long and date.
            </summary>
            <param name="lat">latitude</param>
            <param name="longi">longitude</param>
            <param name="date">DateTime</param>
            <returns>Celestial (Partially Populated)</returns>
        </member>
        <member name="M:CoordinateSharp.Celestial.CalculateMoonData(System.Double,System.Double,System.DateTime)">
            <summary>
            Calculate moon data based on lat/long and date.
            </summary>
            <param name="lat">latitude</param>
            <param name="longi">longitude</param>
            <param name="date">DateTime</param>
            <returns>Celestial (Partially Populated)</returns>
        </member>
        <member name="M:CoordinateSharp.Celestial.Get_Solar_Eclipse_Table(System.Double,System.Double,System.DateTime)">
            <summary>
            Returns a List containing solar eclipse data for the century.
            Century return is based on the date passed.
            </summary>
            <param name="lat">latitude</param>
            <param name="longi">longitude</param>
            <param name="date">DateTime</param>
            <returns></returns>
        </member>
        <member name="M:CoordinateSharp.Celestial.Get_Lunar_Eclipse_Table(System.Double,System.Double,System.DateTime)">
            <summary>
            Returns a List containing solar eclipse data for the century.
            Century return is based on the date passed.
            </summary>
            <param name="lat">latitude</param>
            <param name="longi">longitude</param>
            <param name="date">DateTime</param>
            <returns></returns>
        </member>
        <member name="M:CoordinateSharp.Celestial.Calculate_Celestial_IsUp_Booleans(System.DateTime,CoordinateSharp.Celestial)">
            <summary>
            Set bool SunIsUp and MoonIsUp values
            </summary>
            <param name="date">Coordinate GeoDate</param>
            <param name="cel">Celestial Object</param>
        </member>
        <member name="M:CoordinateSharp.Celestial.GetApogees(System.DateTime)">
            <summary>
            Returns Apogee object containing last and next apogee based on the specified date.
            </summary>
            <param name="d">DateTime</param>
            <returns>Apogee</returns>
        </member>
        <member name="M:CoordinateSharp.Celestial.GetPerigees(System.DateTime)">
            <summary>
            Returns Perigee object containing last and next perigee based on the specified date.
            </summary>
            <param name="d">DateTime</param>
            <returns>Perigee</returns>
        </member>
        <member name="M:CoordinateSharp.MoonCalc.GetMoonTimes(System.DateTime,System.Double,System.Double,CoordinateSharp.Celestial)">
            <summary>
            Gets Moon Times, Altitude and Azimuth
            </summary>
            <param name="date">Date</param>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
            <param name="c">Celestial</param>
        </member>
        <member name="M:CoordinateSharp.MoonCalc.MoonPerigeeOrApogee(System.DateTime,CoordinateSharp.MoonDistanceType)">
            <summary>
            Grabs Perigee or Apogee of Moon based on specified time.
            Results will return event just before, or just after specified DateTime
            </summary>
            <param name="d">DateTime</param>
            <param name="md">Event Type</param>
            <returns>PerigeeApogee</returns>
        </member>
        <member name="M:CoordinateSharp.MoonCalc.GetMoonDistance(System.DateTime)">
            <summary>
            Gets moon distance (Ch 47).
            </summary>
            <param name="d">DateTime</param>
            <returns>Distance</returns>
        </member>
        <member name="M:CoordinateSharp.MoonCalc.Get_Moon_LDMNF(System.Double)">
            <summary>
            Gets Moon L, D, M, N, F values
            Ch. 47 
            </summary>
            <param name="T">Dynamic Time</param>
            <returns>double[] containing L,D,M,N,F</returns>
        </member>
        <member name="M:CoordinateSharp.MoonCalc.Get_Moon_Coordinates(System.Double[],System.Double)">
            <summary>
            Get moons lat/long in radians (Ch 47).
            </summary>
            <param name="LDMNF">L,D,M,N,F</param>
            <param name="T">Dynamic Time</param>
            <returns>Lat[0], Long[1]</returns>
        </member>
        <member name="M:CoordinateSharp.MoonCalc.rightAscension(System.Double,System.Double)">
            <summary>
            Gets right Ascension of celestial object (Ch 13 Fig 13.3)
            </summary>
            <param name="l">latitude in radians</param>
            <param name="b">longitude in radian</param>
            <returns>Right Ascension</returns>
        </member>
        <member name="M:CoordinateSharp.MoonCalc.declination(System.Double,System.Double)">
            <summary>
            Gets declination of celestial object (Ch 13 Fig 13.4)
            </summary>
            <param name="l">latitude in radians</param>
            <param name="b">longitude in radian</param>
            <returns>Declination</returns>
        </member>
        <member name="M:CoordinateSharp.SunCalc.Get_Event_Time(System.Double,System.Double,System.Double,System.DateTime)">
            <summary>
            Gets time of event based on specified degree below horizon
            </summary>
            <param name="lw">Observer Longitude in radians</param>
            <param name="phi">Observer Latitude in radians</param>
            <param name="h">Angle in Degrees</param>
            <param name="date">Date of Event</param>
            <returns>DateTime?[]{rise, set}</returns>
        </member>
        <member name="T:CoordinateSharp.LatZones">
            <summary>
            Used for UTM/MGRS Conversions
            </summary>
        </member>
        <member name="T:CoordinateSharp.Digraphs">
            <summary>
            Used for handling diagraph determination
            </summary>
        </member>
        <member name="T:CoordinateSharp.Digraph">
            <summary>
            Diagraph model
            </summary>
        </member>
        <member name="T:CoordinateSharp.CoordinateType">
            <summary>
            Used for setting whether a coordinate part is latitudinal or longitudinal.
            </summary>
        </member>
        <member name="F:CoordinateSharp.CoordinateType.Lat">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="F:CoordinateSharp.CoordinateType.Long">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="T:CoordinateSharp.CoordinatesPosition">
            <summary>
            Used to set a coordinate part position.
            </summary>
        </member>
        <member name="F:CoordinateSharp.CoordinatesPosition.N">
            <summary>
            North
            </summary>
        </member>
        <member name="F:CoordinateSharp.CoordinatesPosition.E">
            <summary>
            East
            </summary>
        </member>
        <member name="F:CoordinateSharp.CoordinatesPosition.S">
            <summary>
            South
            </summary>
        </member>
        <member name="F:CoordinateSharp.CoordinatesPosition.W">
            <summary>
            West
            </summary>
        </member>
        <member name="T:CoordinateSharp.Coordinate_Datum">
            <summary>
            Coordinate type datum specification
            </summary>
        </member>
        <member name="F:CoordinateSharp.Coordinate_Datum.LAT_LONG">
            <summary>
            Lat Long GeoDetic
            </summary>
        </member>
        <member name="F:CoordinateSharp.Coordinate_Datum.UTM_MGRS">
            <summary>
            UTM and MGRS
            </summary>
        </member>
        <member name="F:CoordinateSharp.Coordinate_Datum.ECEF">
            <summary>
            ECEF
            </summary>
        </member>
        <member name="T:CoordinateSharp.CartesianType">
            <summary>
            Cartesian Coordinate Type
            </summary>
        </member>
        <member name="F:CoordinateSharp.CartesianType.Cartesian">
            <summary>
            Spherical Cartesian
            </summary>
        </member>
        <member name="F:CoordinateSharp.CartesianType.ECEF">
            <summary>
            Earth Centered Earth Fixed
            </summary>
        </member>
        <member name="T:CoordinateSharp.ModM">
            <summary>
            Used for easy read math functions
            </summary>
        </member>
        <member name="T:CoordinateSharp.Shape">
            <summary>
            Earth Shape for Calculations.
            </summary>
        </member>
        <member name="F:CoordinateSharp.Shape.Sphere">
            <summary>
            Calculate as sphere (less accurate, more efficient).
            </summary>
        </member>
        <member name="F:CoordinateSharp.Shape.Ellipsoid">
            <summary>
            Calculate as ellipsoid (more accurate, less efficient).
            </summary>
        </member>
        <member name="T:CoordinateSharp.Cartesian">
            <summary>
            Cartesian (X, Y, Z) Coordinate
            </summary>
        </member>
        <member name="M:CoordinateSharp.Cartesian.#ctor(CoordinateSharp.Coordinate)">
            <summary>
            Create a Cartesian Object
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:CoordinateSharp.Cartesian.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a Cartesian Object
            </summary>
            <param name="xc">X</param>
            <param name="yc">Y</param>
            <param name="zc">Z</param>
        </member>
        <member name="M:CoordinateSharp.Cartesian.ToCartesian(CoordinateSharp.Coordinate)">
            <summary>
            Updates Cartesian Values
            </summary>
            <param name="c"></param>
        </member>
        <member name="P:CoordinateSharp.Cartesian.X">
            <summary>
            X Coordinate
            </summary>
        </member>
        <member name="P:CoordinateSharp.Cartesian.Y">
            <summary>
            y Coordinate
            </summary>
        </member>
        <member name="P:CoordinateSharp.Cartesian.Z">
            <summary>
            Z Coordinate
            </summary>
        </member>
        <member name="M:CoordinateSharp.Cartesian.CartesianToLatLong(System.Double,System.Double,System.Double)">
            <summary>
            Returns a Lat Long Coordinate object based on the provided Cartesian Coordinate
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <returns></returns>
        </member>
        <member name="M:CoordinateSharp.Cartesian.CartesianToLatLong(CoordinateSharp.Cartesian)">
            <summary>
            Returns a Lat Long Coordinate object based on the provided Cartesian Coordinate
            </summary>
            <param name="cart">Cartesian Coordinate</param>
            <returns></returns>
        </member>
        <member name="M:CoordinateSharp.Cartesian.ToString">
            <summary>
            Cartesian Default String Format
            </summary>
            <returns>Cartesian Formatted Coordinate String</returns>
            <returns>Values rounded to the 8th place</returns>
        </member>
        <member name="E:CoordinateSharp.Cartesian.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="M:CoordinateSharp.Cartesian.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property changed
            </summary>
            <param name="propName">Property name</param>
        </member>
        <member name="T:CoordinateSharp.Coordinate">
            <summary>
            Observable class for handling all location based information.
            This is the main class for CoordinateSharp.
            </summary>
            <remarks>
            All information should be pulled from this class to include celestial information
            </remarks>
        </member>
        <member name="M:CoordinateSharp.Coordinate.#ctor">
            <summary>
            Creates an empty Coordinate.
            </summary>
            <remarks>
            Values will need to be provided to latitude/longitude CoordinateParts manually
            </remarks>
        </member>
        <member name="M:CoordinateSharp.Coordinate.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Creates an empty Coordinate with custom datum.
            </summary>
            <remarks>
            Values will need to be provided to latitude/longitude CoordinateParts manually
            </remarks>
        </member>
        <member name="M:CoordinateSharp.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Creates a populated Coordinate based on decimal (signed degrees) formated latitude and longitude.
            </summary>
            <param name="lat">latitude</param>
            <param name="longi">longitude</param>
            <remarks>
            Geodate will default to 1/1/1900 GMT until provided
            </remarks>
        </member>
        <member name="M:CoordinateSharp.Coordinate.#ctor(System.Double,System.Double,System.DateTime)">
            <summary>
            Creates a populated Coordinate object with an assigned GeoDate.
            </summary>
            <param name="lat">latitude</param>
            <param name="longi">longitude</param>
            <param name="date">DateTime (UTC)</param>
        </member>
        <member name="M:CoordinateSharp.Coordinate.#ctor(CoordinateSharp.EagerLoad)">
            <summary>
            Creates an empty Coordinates object with specificied eager loading options.
            </summary>
            <remarks>
            Values will need to be provided to latitude/longitude manually
            </remarks>
            <param name="eagerLoad">Eager loading options</param>
        </member>
        <member name="M:CoordinateSharp.Coordinate.#ctor(System.Double,System.Double,CoordinateSharp.EagerLoad)">
            <summary>
            Creates a populated Coordinate object with specified eager loading options.
            </summary>
            <remarks>
            Geodate will default to 1/1/1900 GMT until provided
            </remarks>
            <param name="lat">latitude</param>
            <param name="longi">longitude</param>
            <param name="eagerLoad">Eager loading options</param>
        </member>
        <member name="M:CoordinateSharp.Coordinate.#ctor(System.Double,System.Double,System.DateTime,CoordinateSharp.EagerLoad)">
            <summary>
            Creates a populated Coordinate object with specified eager load options and an assigned GeoDate.
            </summary>
            <param name="lat">Decimal format latitude</param>
            <param name="longi">Decimal format longitude</param>
            <param name="date">DateTime you wish to use for celestial calculation</param>
            <param name="eagerLoad">Eager loading options</param>
        </member>
        <member name="P:CoordinateSharp.Coordinate.Latitude">
            <summary>
            Latitudinal Coordinate Part
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.Longitude">
            <summary>
            Longitudinal Coordinate Part
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.GeoDate">
            <summary>
            Date used to calculate celestial information
            </summary>
            <remarks>
            Assumes all times are in UTC
            </remarks>
        </member>
        <member name="P:CoordinateSharp.Coordinate.UTM">
            <summary>
            Universal Transverse Mercator Values
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.MGRS">
            <summary>
            Military Grid Reference System (NATO UTM)
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.Cartesian">
            <summary>
            Cartesian (Based on Spherical Earth)
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.ECEF">
            <summary>
            Earth Centered Earth Fixed Coordinate. 
            Uses Ellipsoidal height with no geoid model included.
            0 = Mean Sea Level based on the provided Datum.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.Parse_Format">
            <summary>
            Used to determine what format the coordinate was parsed from.
            Will equal "None" if Coordinate was not initialzed via a TryParse() method.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.CelestialInfo">
            <summary>
            Celestial information based on the objects location and geographic UTC date.
            </summary>
        </member>
        <member name="M:CoordinateSharp.Coordinate.LoadCelestialInfo">
            <summary>
            Initialize celestial information (required if eager loading is turned off).
            </summary>
        </member>
        <member name="M:CoordinateSharp.Coordinate.LoadUTM_MGRS_Info">
            <summary>
            Initialize UTM and MGRS information (required if eager loading is turned off).
            </summary>
        </member>
        <member name="M:CoordinateSharp.Coordinate.LoadCartesianInfo">
            <summary>
            Initialize cartesian information (required if eager loading is turned off).
            </summary>
        </member>
        <member name="M:CoordinateSharp.Coordinate.LoadECEFInfo">
            <summary>
            Initialize ECEF information (required if eager loading is turned off).
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.FormatOptions">
            <summary>
            Coordinate string formatting options.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.EagerLoadSettings">
            <summary>
            Eager loading settings.
            </summary>
        </member>
        <member name="P:CoordinateSharp.Coordinate.Display">
            <summary>
            Bindable formatted coordinate string.
            </summary>
            <remarks>Bind to this property when MVVM patterns used</remarks>
        </member>
        <member name="M:CoordinateSharp.Coordinate.ToString">
            <summary>
            Overridden Coordinate ToString() method.
            </summary>
            <returns>string (formatted).</returns>
        </member>
        <member name="M:CoordinateSharp.Coordinate.ToString(CoordinateSharp.CoordinateFormatOptions)">
            <summary>
            Overridden Coordinate ToString() method that accepts formatting. 
            Refer to documentation for coordinate format options.
            </summary>
            <param name="options">CoordinateFormatOptions</param>
            <returns>Custom formatted coordinate</returns>
        </member>
        <member name="M:CoordinateSharp.Coordinate.Set_Datum(System.Double,System.Double)">
            <summary>
            Set a custom datum for coordinate conversions and distance calculation.
            Objects must be loaded prior to setting if EagerLoading is turned off or else the items Datum won't be set.
            Use overload if EagerLoading options are used.
            </summary>
            <param name="radius">Equatorial Radius</param>
            <param name="flat">Inverse Flattening</param>
        </member>
        <member name="M:CoordinateSharp.Coordinate.Set_Datum(System.Double,System.Double,CoordinateSharp.Coordinate_Datum)">
            <summary>
            Set a custom datum for coordinate conversions and distance calculation for specified coordinate formats only.
            Objects must be loaded prior to setting if EagerLoading is turned off.
            </summary>
            <param name="radius">Equatorial Radius</param>
            <param name="flat">Inverse Flattening</param>
            <param name="cd">Coordinate_Datum</param>
        </member>
        <member name="M:CoordinateSharp.Coordinate.Get_Distance_From_Coordinate(CoordinateSharp.Coordinate)">
            <summary>
            Returns a Distance object based on the current and specified coordinate (Haversine / Spherical Earth).
            </summary>
            <param name="c2">Coordinate</param>
            <returns>Distance</returns>
        </member>
        <member name="M:CoordinateSharp.Coordinate.Get_Distance_From_Coordinate(CoordinateSharp.Coordinate,CoordinateSharp.Shape)">
            <summary>
            Returns a Distance object based on the current and specified coordinate and specified earth shape.
            </summary>
            <param name="c2">Coordinate</param>
            <param name="shape">Earth shape</param>
            <returns>Distance</returns>
        </member>
        <member name="M:CoordinateSharp.Coordinate.Move(System.Double,System.Double,CoordinateSharp.Shape)">
            <summary>
            Move coordinate based on provided bearing and distance (in meters).
            </summary>
            <param name="distance">distance in meters</param>
            <param name="bearing">bearing</param>
            <param name="shape">shape of earth</param>
        </member>
        <member name="M:CoordinateSharp.Coordinate.Move(CoordinateSharp.Coordinate,System.Double,CoordinateSharp.Shape)">
            <summary>
            Move coordinate based on provided target coordinate and distance (in meters).
            </summary>
            <param name="c">Target coordinate</param>
            <param name="distance">Distance toward target in meters</param>
            <param name="shape">Shape of earth</param>
        </member>
        <member name="M:CoordinateSharp.Coordinate.TryParse(System.String,CoordinateSharp.Coordinate@)">
            <summary>
            Attempts to parse a string into a Coordinate.
            </summary>
            <param name="s">Coordinate string</param>
            <param name="c">Coordinate</param>
            <returns>boolean</returns>
            <example>
            <code>
            Coordinate c;
            if(Coordinate.TryParse("N 32.891º W 64.872º",out c))
            {
                Console.WriteLine(c); //N 32º 53' 28.212" W 64º 52' 20.914"
            }
            </code>
            </example>
        </member>
        <member name="M:CoordinateSharp.Coordinate.TryParse(System.String,System.DateTime,CoordinateSharp.Coordinate@)">
            <summary>
            Attempts to parse a string into a Coordinate with specified DateTime
            </summary>
            <param name="s">Coordinate string</param>
            <param name="geoDate">GeoDate</param>
            <param name="c">Coordinate</param>
            <returns>boolean</returns>
            <example>
            <code>
            Coordinate c;
            if(Coordinate.TryParse("N 32.891º W 64.872º", new DateTime(2018,7,7), out c))
            {
                Console.WriteLine(c); //N 32º 53' 28.212" W 64º 52' 20.914"
            }
            </code>
            </example>
        </member>
        <member name="M:CoordinateSharp.Coordinate.TryParse(System.String,CoordinateSharp.CartesianType,CoordinateSharp.Coordinate@)">
            <summary>
            Attempts to parse a string into a Coordinate.
            </summary>
            <param name="s">Coordinate string</param>
            <param name="c">Coordinate</param>
            <param name="ct">Cartesian Type</param>
            <returns>boolean</returns>
            <example>
            <code>
            Coordinate c;
            if(Coordinate.TryParse("N 32.891º W 64.872º", CartesianType.Cartesian, out c))
            {
                Console.WriteLine(c); //N 32º 53' 28.212" W 64º 52' 20.914"
            }
            </code>
            </example>
        </member>
        <member name="M:CoordinateSharp.Coordinate.TryParse(System.String,System.DateTime,CoordinateSharp.CartesianType,CoordinateSharp.Coordinate@)">
            <summary>
            Attempts to parse a string into a Coordinate with specified DateTime
            </summary>
            <param name="s">Coordinate string</param>
            <param name="geoDate">GeoDate</param>
            <param name="c">Coordinate</param>
            <param name="ct">Cartesian Type</param>
            <returns>boolean</returns>
            <example>
            <code>
            Coordinate c;
            if(Coordinate.TryParse("N 32.891º W 64.872º", new DateTime(2018,7,7), CartesianType.Cartesian, out c))
            {
                Console.WriteLine(c); //N 32º 53' 28.212" W 64º 52' 20.914"
            }
            </code>
            </example>
        </member>
        <member name="E:CoordinateSharp.Coordinate.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="M:CoordinateSharp.Coordinate.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property changed
            </summary>
            <param name="propName">Property name</param>
        </member>
        <member name="T:CoordinateSharp.CoordinatePart">
            <summary>
            Observable class for handling latitudinal and longitudinal coordinate parts.
            </summary>
            <remarks>
            Objects can be passed to Coordinate object Latitude and Longitude properties.
            </remarks>
        </member>
        <member name="P:CoordinateSharp.CoordinatePart.Parent">
            <summary>
            Used to determine and notify the CoordinatePart parent Coordinate object.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinatePart.DecimalDegree">
            <summary>
            Observable decimal format coordinate.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinatePart.DecimalMinute">
            <summary>
            Observable decimal format minute.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinatePart.Degrees">
            <summary>
            Observable coordinate degree.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinatePart.Minutes">
            <summary>
            Observable coordinate minute.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinatePart.Seconds">
            <summary>
            Observable coordinate second.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinatePart.Display">
            <summary>
            Formate coordinate part string.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinatePart.Position">
            <summary>
            Observable coordinate position.
            </summary>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.#ctor(CoordinateSharp.CoordinateType,CoordinateSharp.Coordinate)">
            <summary>
            Creates an empty CoordinatePart.
            </summary>
            <param name="t">CoordinateType</param>
            <param name="c">Parent Coordinate object</param>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.#ctor(System.Double,CoordinateSharp.CoordinateType,CoordinateSharp.Coordinate)">
            <summary>
            Creates a populated CoordinatePart from a decimal format part.
            </summary>
            <param name="value">Coordinate decimal value</param>
            <param name="t">Coordinate type</param>
            <param name="c">Parent Coordinate object</param>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.#ctor(System.Int32,System.Int32,System.Double,CoordinateSharp.CoordinatesPosition,CoordinateSharp.Coordinate)">
            <summary>
            Creates a populated CoordinatePart object from a Degrees Minutes Seconds part.
            </summary>
            <param name="deg">Degrees</param>
            <param name="min">Minutes</param>
            <param name="sec">Seconds</param>
            <param name="pos">Coordinate Part Position</param>
            <param name="c">Parent Coordinate</param>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.#ctor(System.Int32,System.Double,CoordinateSharp.CoordinatesPosition,CoordinateSharp.Coordinate)">
            <summary>
            Creates a populated CoordinatePart from a Degrees Minutes Seconds part.
            </summary>
            <param name="deg">Degrees</param>
            <param name="minSec">Decimal Minutes</param> 
            <param name="pos">Coordinate Part Position</param>
            <param name="c">Parent Coordinate object</param>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.#ctor(CoordinateSharp.CoordinateType)">
            <summary>
            Creates an empty CoordinatePart.
            </summary>
            <param name="t">CoordinateType</param>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.#ctor(System.Double,CoordinateSharp.CoordinateType)">
            <summary>
            Creates a populated CoordinatePart from a decimal format part.
            </summary>
            <param name="value">Coordinate decimal value</param>
            <param name="t">Coordinate type</param>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.#ctor(System.Int32,System.Int32,System.Double,CoordinateSharp.CoordinatesPosition)">
            <summary>
            Creates a populated CoordinatePart object from a Degrees Minutes Seconds part.
            </summary>
            <param name="deg">Degrees</param>
            <param name="min">Minutes</param>
            <param name="sec">Seconds</param>
            <param name="pos">Coordinate Part Position</param>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.#ctor(System.Int32,System.Double,CoordinateSharp.CoordinatesPosition)">
            <summary>
            Creates a populated CoordinatePart from a Degrees Minutes Seconds part.
            </summary>
            <param name="deg">Degrees</param>
            <param name="minSec">Decimal Minutes</param> 
            <param name="pos">Coordinate Part Position</param>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.ToDouble">
            <summary>
            Signed degrees (decimal) format coordinate.
            </summary>
            <returns>double</returns>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.ToString">
            <summary>
            Overridden Coordinate ToString() method
            </summary>
            <returns>Dstring</returns>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.ToString(CoordinateSharp.CoordinateFormatOptions)">
            <summary>
            Formatted CoordinatePart string.
            </summary>
            <param name="options">CoordinateFormatOptions</param>
            <returns>string (formatted)</returns>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.FormatString(CoordinateSharp.CoordinateFormatOptions)">
            <summary>
            String formatting logic
            </summary>
            <param name="options">CoordinateFormatOptions</param>
            <returns>Formatted coordinate part string</returns>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.NotifyProperties(CoordinateSharp.CoordinatePart.PropertyTypes)">
            <summary>
            Notify the correct properties and parent properties.
            </summary>
            <param name="p">Property Type</param>
        </member>
        <member name="E:CoordinateSharp.CoordinatePart.PropertyChanged">
            <summary>
            Property changed event.
            </summary>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property changed
            </summary>
            <param name="propName">Property name</param>
        </member>
        <member name="T:CoordinateSharp.CoordinatePart.PropertyTypes">
            <summary>
            Used for notifying the correct properties.
            </summary>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.ToRadians">
            <summary>
            Returns CoordinatePart in radians
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.TryParse(System.String,CoordinateSharp.CoordinatePart@)">
            <summary>
            Attempts to parse a string into a CoordinatePart.
            </summary>
            <param name="s">CoordinatePart string</param>
            <param name="cp">CoordinatePart</param>
            <returns>boolean</returns>
            <example>
            <code>
            CoordinatePart cp;
            if(CoordinatePart.TryParse("N 32.891º", out cp))
            {
                Console.WriteLine(cp); //N 32º 53' 28.212"
            }
            </code>
            </example>
        </member>
        <member name="M:CoordinateSharp.CoordinatePart.TryParse(System.String,CoordinateSharp.CoordinateType,CoordinateSharp.CoordinatePart@)">
            <summary>
            Attempts to parse a string into a CoordinatePart. 
            </summary>
            <param name="s">CoordinatePart string</param>
            <param name="t">CoordinateType</param>
            <param name="cp">CoordinatePart</param>
            <returns>boolean</returns>
            <example>
            <code>
            CoordinatePart cp;
            if(CoordinatePart.TryParse("-32.891º", CoordinateType.Long, out cp))
            {
                Console.WriteLine(cp); //W 32º 53' 27.6"
            }
            </code>
            </example>
        </member>
        <member name="T:CoordinateSharp.EagerLoad">
            <summary>
            Turn on/off eager loading of certain properties.
            </summary>
        </member>
        <member name="M:CoordinateSharp.EagerLoad.#ctor">
            <summary>
            Create an EagerLoad object
            </summary>
        </member>
        <member name="M:CoordinateSharp.EagerLoad.#ctor(System.Boolean)">
            <summary>
            Create an EagerLoad object with all options on or off
            </summary>
            <param name="isOn">Turns EagerLoad on or off</param>
        </member>
        <member name="M:CoordinateSharp.EagerLoad.#ctor(CoordinateSharp.EagerLoadType)">
            <summary>
            Create an EagerLoad object with only the specified flag options turned on.
            </summary>
            <param name="et">EagerLoadType</param>
        </member>
        <member name="M:CoordinateSharp.EagerLoad.Create(CoordinateSharp.EagerLoadType)">
            <summary>
            Creates an EagerLoad object. Only the specified flags will be set to EagerLoad.
            </summary>
            <param name="et">EagerLoadType</param>
            <returns>EagerLoad</returns>
        </member>
        <member name="P:CoordinateSharp.EagerLoad.Celestial">
            <summary>
            Eager load celestial information.
            </summary>
        </member>
        <member name="P:CoordinateSharp.EagerLoad.UTM_MGRS">
            <summary>
            Eager load UTM and MGRS information
            </summary>
        </member>
        <member name="P:CoordinateSharp.EagerLoad.Cartesian">
            <summary>
            Eager load Cartesian information
            </summary>
        </member>
        <member name="P:CoordinateSharp.EagerLoad.ECEF">
            <summary>
            Eager load ECEF information
            </summary>
        </member>
        <member name="T:CoordinateSharp.EagerLoadType">
            <summary>
            EagerLoad Enumerator
            </summary>
        </member>
        <member name="F:CoordinateSharp.EagerLoadType.UTM_MGRS">
            <summary>
            UTM and MGRS
            </summary>
        </member>
        <member name="F:CoordinateSharp.EagerLoadType.Celestial">
            <summary>
            Celestial
            </summary>
        </member>
        <member name="F:CoordinateSharp.EagerLoadType.Cartesian">
            <summary>
            Cartesian
            </summary>
        </member>
        <member name="F:CoordinateSharp.EagerLoadType.ECEF">
            <summary>
            ECEF
            </summary>
        </member>
        <member name="T:CoordinateSharp.ECEF">
            <summary>
            Earth Centered - Earth Fixed (X,Y,Z) Coordinate 
            </summary>
        </member>
        <member name="M:CoordinateSharp.ECEF.#ctor(CoordinateSharp.Coordinate)">
            <summary>
            Create an ECEF Object
            </summary>
            <param name="c">Coordinate</param>
        </member>
        <member name="M:CoordinateSharp.ECEF.#ctor(CoordinateSharp.Coordinate,CoordinateSharp.Distance)">
            <summary>
            Create an ECEF Object
            </summary>
            <param name="c">Coordinate</param>
            <param name="height">Coordinate</param>
        </member>
        <member name="M:CoordinateSharp.ECEF.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create an ECEF Object
            </summary>
            <param name="xc">X</param>
            <param name="yc">Y</param>
            <param name="zc">Z</param>
        </member>
        <member name="M:CoordinateSharp.ECEF.ToECEF(CoordinateSharp.Coordinate)">
            <summary>
            Updates ECEF Values
            </summary>
            <param name="c">Coordinate</param>
        </member>
        <member name="P:CoordinateSharp.ECEF.Equatorial_Radius">
            <summary>
            Datum Equatorial Radius / Semi Major Axis
            </summary>
        </member>
        <member name="P:CoordinateSharp.ECEF.Inverse_Flattening">
            <summary>
            Datum Flattening
            </summary>
        </member>
        <member name="P:CoordinateSharp.ECEF.X">
            <summary>
            X Coordinate
            </summary>
        </member>
        <member name="P:CoordinateSharp.ECEF.Y">
            <summary>
            y Coordinate
            </summary>
        </member>
        <member name="P:CoordinateSharp.ECEF.Z">
            <summary>
            Z Coordinate
            </summary>
        </member>
        <member name="P:CoordinateSharp.ECEF.GeoDetic_Height">
            <summary>
            GeoDetic Height from Mean Sea Level.
            Used for converting Lat Long / ECEF.
            Default value is 0. Adjust as needed.
            </summary>
        </member>
        <member name="M:CoordinateSharp.ECEF.Set_GeoDetic_Height(CoordinateSharp.Coordinate,CoordinateSharp.Distance)">
            <summary>
            Sets GeoDetic height for ECEF conversion.
            Recalculate ECEF Coordinate
            </summary>
            <param name="c">Coordinate</param>
            <param name="dist">Height</param>
        </member>
        <member name="M:CoordinateSharp.ECEF.ECEFToLatLong(System.Double,System.Double,System.Double)">
            <summary>
            Returns a Geodetic Coordinate object based on the provided ECEF Coordinate
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <returns>Coordinate</returns>
        </member>
        <member name="M:CoordinateSharp.ECEF.ECEFToLatLong(CoordinateSharp.ECEF)">
            <summary>
            Returns a Geodetic Coordinate object based on the provided ECEF Coordinate
            </summary>
            <param name="ecef">ECEF Coordinate</param>
            <returns>Coordinate</returns>
        </member>
        <member name="M:CoordinateSharp.ECEF.ToString">
            <summary>
            ECEF Default String Format
            </summary>
            <returns>ECEF Formatted Coordinate String</returns>
            <returns>Values rounded to the 3rd place</returns>
        </member>
        <member name="E:CoordinateSharp.ECEF.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="M:CoordinateSharp.ECEF.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property changed
            </summary>
            <param name="propName">Property name</param>
        </member>
        <member name="M:CoordinateSharp.ECEF.WGS84">
            <summary>
            Initialize EARTH global variables based on the Datum
            </summary>
        </member>
        <member name="M:CoordinateSharp.ECEF.EarthCon(System.Double,System.Double)">
            <summary>
            Sets Earth Constants as Globals
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
        </member>
        <member name="M:CoordinateSharp.ECEF.radcur(System.Double)">
            <summary>
            Compute the radii at the geodetic latitude (degrees)
            </summary>
            <param name="lat">Latitude in degres</param>
            <returns>double[]</returns>
        </member>
        <member name="M:CoordinateSharp.ECEF.rearth(System.Double)">
            <summary>
            Physical radius of the Earth
            </summary>
            <param name="lat">Latidude in degrees</param>
            <returns>double</returns>
        </member>
        <member name="M:CoordinateSharp.ECEF.gc2gd(System.Double,System.Double)">
            <summary>
            Converts geocentric latitude to geodetic latitude
            </summary>
            <param name="flatgc">Geocentric latitude</param>
            <param name="altkm">Altitude in KM</param>
            <returns>double</returns>
        </member>
        <member name="M:CoordinateSharp.ECEF.gd2gc(System.Double,System.Double)">
            <summary>
            Converts geodetic latitude to geocentric latitude
            </summary>
            <param name="flatgd">Geodetic latitude tp geocentric latitide</param>
            <param name="altkm">Altitude in KM</param>
            <returns>double</returns>
        </member>
        <member name="M:CoordinateSharp.ECEF.llenu(System.Double,System.Double)">
            <summary>
            Converts lat / long to east, north, up vectors
            </summary>
            <param name="flat">Latitude</param>
            <param name="flon">Longitude</param>
            <returns>Array[] of double[]</returns>
        </member>
        <member name="M:CoordinateSharp.ECEF.LatLong_To_ECEF(System.Double,System.Double,System.Double)">
            <summary>
            Gets ECEF vector in KM
            </summary>
            <param name="lat">Latitude</param>
            <param name="longi">Longitude</param>
            <param name="altkm">Altitude in KM</param>
            <returns>double[]</returns>
        </member>
        <member name="M:CoordinateSharp.ECEF.ECEF_To_LatLong(System.Double,System.Double,System.Double)">
            <summary>
            Converts ECEF X, Y, Z to GeoDetic Lat / Long and Height in KM
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:CoordinateSharp.CoordinateFormatOptions">
            <summary>
            Coordinate formatting options for a Coordinate object.
            </summary>
        </member>
        <member name="M:CoordinateSharp.CoordinateFormatOptions.#ctor">
            <summary>
            Set default values with the constructor.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Format">
            <summary>
            Coordinate format type.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Round">
            <summary>
            Rounds Coordinates to the set value.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Display_Leading_Zeros">
            <summary>
            Displays leading zeros.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Display_Trailing_Zeros">
            <summary>
            Display trailing zeros.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Display_Symbols">
            <summary>
            Allow symbols to display.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Display_Degree_Symbol">
            <summary>
            Display degree symbols.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Display_Minute_Symbol">
            <summary>
            Display minute symbols.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Display_Seconds_Symbol">
            <summary>
            Display secons symbol.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Display_Hyphens">
            <summary>
            Display hyphens between values.
            </summary>
        </member>
        <member name="P:CoordinateSharp.CoordinateFormatOptions.Position_First">
            <summary>
            Show coordinate position first.
            Will show last if set 'false'.
            </summary>
        </member>
        <member name="T:CoordinateSharp.CoordinateFormatType">
            <summary>
            Coordinate Format Types.
            </summary>
        </member>
        <member name="F:CoordinateSharp.CoordinateFormatType.Decimal_Degree">
            <summary>
            Decimal Degree Format
            </summary>
            <remarks>
            Example: N 40.456 W 75.456
            </remarks>
        </member>
        <member name="F:CoordinateSharp.CoordinateFormatType.Degree_Decimal_Minutes">
            <summary>
            Decimal Degree Minutes Format
            </summary>
            <remarks>
            Example: N 40º 34.552' W 70º 45.408'
            </remarks>
        </member>
        <member name="F:CoordinateSharp.CoordinateFormatType.Degree_Minutes_Seconds">
            <summary>
            Decimal Degree Minutes Format
            </summary>
            <remarks>
            Example: N 40º 34" 36.552' W 70º 45" 24.408'
            </remarks>
        </member>
        <member name="F:CoordinateSharp.CoordinateFormatType.Decimal">
            <summary>
            Decimal Format
            </summary>
            <remarks>
            Example: 40.57674 -70.46574
            </remarks>
        </member>
        <member name="T:CoordinateSharp.MilitaryGridReferenceSystem">
            <summary>
            Military Grid Reference System (MGRS). Uses the WGS 84 Datum.
            Relies upon values from the UniversalTransverseMercator class
            </summary>
        </member>
        <member name="M:CoordinateSharp.MilitaryGridReferenceSystem.#ctor(System.String,System.Int32,System.String,System.Double,System.Double)">
            <summary>
            Create an MGRS object with WGS84 datum
            </summary>
            <param name="latz">Lat Zone</param>
            <param name="longz">Long Zone</param>
            <param name="d">Digraph</param>
            <param name="e">Easting</param>
            <param name="n">Northing</param>
        </member>
        <member name="M:CoordinateSharp.MilitaryGridReferenceSystem.#ctor(System.String,System.Int32,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an MGRS object with custom datum
            </summary>
            <param name="latz">Lat Zone</param>
            <param name="longz">Long Zone</param>
            <param name="d">Digraph</param>
            <param name="e">Easting</param>
            <param name="n">Northing</param>
            <param name="rad">Equatorial Radius</param>
            <param name="flt">Inverse Flattening</param>
        </member>
        <member name="P:CoordinateSharp.MilitaryGridReferenceSystem.LatZone">
            <summary>
            MGRS Zone Letter
            </summary>
        </member>
        <member name="P:CoordinateSharp.MilitaryGridReferenceSystem.LongZone">
            <summary>
            MGRS Zone Number
            </summary>
        </member>
        <member name="P:CoordinateSharp.MilitaryGridReferenceSystem.Easting">
            <summary>
            MGRS Easting
            </summary>
        </member>
        <member name="P:CoordinateSharp.MilitaryGridReferenceSystem.Northing">
            <summary>
            MGRS Northing
            </summary>
        </member>
        <member name="P:CoordinateSharp.MilitaryGridReferenceSystem.Digraph">
            <summary>
            MGRS Digraph
            </summary>
        </member>
        <member name="P:CoordinateSharp.MilitaryGridReferenceSystem.WithinCoordinateSystemBounds">
            <summary>
            Is MGRS conversion within the coordinate system's accurate boundaries after conversion from Lat/Long.
            </summary>
        </member>
        <member name="M:CoordinateSharp.MilitaryGridReferenceSystem.MGRStoLatLong(CoordinateSharp.MilitaryGridReferenceSystem)">
            <summary>
            Creates a Coordinate object from an MGRS/NATO UTM Coordinate
            </summary>
            <param name="mgrs">MilitaryGridReferenceSystem</param>
            <returns>Coordinate object</returns>
        </member>
        <member name="M:CoordinateSharp.MilitaryGridReferenceSystem.ToString">
            <summary>
            MGRS Default String Format
            </summary>
            <returns>MGRS Formatted Coordinate String</returns>
        </member>
        <member name="E:CoordinateSharp.MilitaryGridReferenceSystem.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="M:CoordinateSharp.MilitaryGridReferenceSystem.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property changed
            </summary>
            <param name="propName">Property name</param>
        </member>
        <member name="T:CoordinateSharp.Parse_Format_Type">
            <summary>
            Type of format a Coordinate parsed from. 
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.None">
            <summary>
            Coordinate was not initialized from a parser method.
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.Signed_Degree">
            <summary>
            Signed Degree
            DD.dddd
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.Decimal_Degree">
            <summary>
            Decimal Degree
            P DD.dddd
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.Degree_Decimal_Minute">
            <summary>
            Degree Decimal Minute
            P DD MM.sss
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.Degree_Minute_Second">
            <summary>
            Degree Minute Second
            P DD MM SS.sss
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.UTM">
            <summary>
            Universal Transverse Mercator
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.MGRS">
            <summary>
            Military Grid Reference System
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.Cartesian_Spherical">
            <summary>
            Spherical Cartesian
            </summary>
        </member>
        <member name="F:CoordinateSharp.Parse_Format_Type.Cartesian_ECEF">
            <summary>
            Earth Centered Earth Fixed
            </summary>
        </member>
        <member name="T:CoordinateSharp.UniversalTransverseMercator">
            <summary>
            Universal Transverse Mercator (UTM) coordinate system. Uses the WGS 84 Datum.
            </summary>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.#ctor(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            Creates a UniversalTransverMercator object with a WGS84 Datum.
            </summary>
            <param name="latz">Latitude zone</param>
            <param name="longz">Longitude zone</param>
            <param name="est">Easting</param>
            <param name="nrt">Northing</param>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.#ctor(System.String,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a UniversalTransverMercator object with a custom Datum.
            </summary>
            <param name="latz">Latitude zone</param>
            <param name="longz">Longitude zone</param>
            <param name="est">Easting</param>
            <param name="nrt">Northing</param>
            <param name="radius">Equatorial Radius</param>
            <param name="flaten">Inverse Flattening</param>
        </member>
        <member name="P:CoordinateSharp.UniversalTransverseMercator.LatZone">
            <summary>
            UTM Zone Letter
            </summary>
        </member>
        <member name="P:CoordinateSharp.UniversalTransverseMercator.LongZone">
            <summary>
            UTM Zone Number
            </summary>
        </member>
        <member name="P:CoordinateSharp.UniversalTransverseMercator.Easting">
            <summary>
            UTM Easting
            </summary>
        </member>
        <member name="P:CoordinateSharp.UniversalTransverseMercator.Northing">
            <summary>
            UTM Northing
            </summary>
        </member>
        <member name="P:CoordinateSharp.UniversalTransverseMercator.Equatorial_Radius">
            <summary>
            Datum Equatorial Radius / Semi Major Axis
            </summary>
        </member>
        <member name="P:CoordinateSharp.UniversalTransverseMercator.Inverse_Flattening">
            <summary>
            Datum Flattening
            </summary>
        </member>
        <member name="P:CoordinateSharp.UniversalTransverseMercator.WithinCoordinateSystemBounds">
            <summary>
            Is the UTM conversion within the coordinate system's accurate boundaries after conversion from Lat/Long.
            </summary>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.#ctor(System.Double,System.Double,CoordinateSharp.Coordinate)">
            <summary>
            Constructs a UTM object based off DD Lat/Long
            </summary>
            <param name="lat">DD Latitude</param>
            <param name="longi">DD Longitide</param>
            <param name="c">Parent Coordinate Object</param>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.#ctor(System.Double,System.Double,CoordinateSharp.Coordinate,System.Double,System.Double)">
            <summary>
            Constructs a UTM object based off DD Lat/Long
            </summary>
            <param name="lat">DD Latitude</param>
            <param name="longi">DD Longitide</param>
            <param name="c">Parent Coordinate Object</param>
            <param name="rad">Equatorial Radius</param>
            <param name="flt">Flattening</param>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.#ctor(System.String,System.Int32,System.Double,System.Double,CoordinateSharp.Coordinate,System.Double,System.Double)">
            <summary>
            Constructs a UTM object based off a UTM coordinate
            Not yet implemented
            </summary>
            <param name="latz">Zone Letter</param>
            <param name="longz">Zone Number</param>
            <param name="e">Easting</param>
            <param name="n">Northing</param>
            <param name="c">Parent Coordinate Object</param>
            <param name="rad">Equatorial Radius</param>
            <param name="flt">Inverse Flattening</param>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.Verify_Lat_Zone(System.String)">
            <summary>
            Verifies Lat zone when convert from UTM to DD Lat/Long
            </summary>
            <param name="l">Zone Letter</param>
            <returns>boolean</returns>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.ToUTM(System.Double,System.Double,CoordinateSharp.UniversalTransverseMercator)">
            <summary>
            Assigns UTM values based of Lat/Long
            </summary>
            <param name="lat">DD Latitude</param>
            <param name="longi">DD longitude</param>
            <param name="utm">UTM Object to modify</param>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.ToString">
            <summary>
            UTM Default String Format
            </summary>
            <returns>UTM Formatted Coordinate String</returns>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.ConvertUTMtoLatLong(CoordinateSharp.UniversalTransverseMercator)">
            <summary>
            Converts UTM coordinate to Lat/Long
            </summary>
            <param name="utm">utm</param>
            <returns>Coordinate object</returns>
        </member>
        <member name="E:CoordinateSharp.UniversalTransverseMercator.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="M:CoordinateSharp.UniversalTransverseMercator.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property changed
            </summary>
            <param name="propName">Property name</param>
        </member>
        <member name="T:CoordinateSharp.Distance">
            <summary>
            Contains distance values between two coordinates.
            </summary>
        </member>
        <member name="M:CoordinateSharp.Distance.#ctor(CoordinateSharp.Coordinate,CoordinateSharp.Coordinate)">
            <summary>
            Initializes a distance object using Haversine (Spherical Earth).
            </summary>
            <param name="c1">Coordinate 1</param>
            <param name="c2">Coordinate 2</param>
        </member>
        <member name="M:CoordinateSharp.Distance.#ctor(CoordinateSharp.Coordinate,CoordinateSharp.Coordinate,CoordinateSharp.Shape)">
            <summary>
            Initializes a distance object using Haversine (Spherical Earth) or Vincenty (Elliptical Earth).
            </summary>
            <param name="c1">Coordinate 1</param>
            <param name="c2">Coordinate 2</param>
            <param name="shape">Shape of earth</param>
        </member>
        <member name="M:CoordinateSharp.Distance.#ctor(System.Double)">
            <summary>
            Initializes distance object based on distance in KM
            </summary>
            <param name="km">Kilometers</param>
        </member>
        <member name="M:CoordinateSharp.Distance.#ctor(System.Double,CoordinateSharp.DistanceType)">
            <summary>
            Initializaes distance object based on specified distance and measurement type
            </summary>
            <param name="distance">Distance</param>
            <param name="type">Measurement type</param>
        </member>
        <member name="P:CoordinateSharp.Distance.Kilometers">
            <summary>
            Distance in Kilometers
            </summary>
        </member>
        <member name="P:CoordinateSharp.Distance.Miles">
            <summary>
            Distance in Statute Miles
            </summary>
        </member>
        <member name="P:CoordinateSharp.Distance.NauticalMiles">
            <summary>
            Distance in Nautical Miles
            </summary>
        </member>
        <member name="P:CoordinateSharp.Distance.Meters">
            <summary>
            Distance in Meters
            </summary>
        </member>
        <member name="P:CoordinateSharp.Distance.Feet">
            <summary>
            Distance in Feet
            </summary>
        </member>
        <member name="P:CoordinateSharp.Distance.Bearing">
            <summary>
            Initial Bearing from Coordinate 1 to Coordinate 2
            </summary>
        </member>
        <member name="T:CoordinateSharp.DistanceType">
            <summary>
            Distance measurement type
            </summary>
        </member>
        <member name="F:CoordinateSharp.DistanceType.Meters">
            <summary>
            Distance in Meters
            </summary>
        </member>
        <member name="F:CoordinateSharp.DistanceType.Kilometers">
            <summary>
            Distance in Kilometers
            </summary>
        </member>
        <member name="F:CoordinateSharp.DistanceType.Feet">
            <summary>
            Distance in Feet
            </summary>
        </member>
        <member name="F:CoordinateSharp.DistanceType.Miles">
            <summary>
            Distance in Statute Miles
            </summary>
        </member>
        <member name="F:CoordinateSharp.DistanceType.NauticalMiles">
            <summary>
            Distance in Nautical Miles
            </summary>
        </member>
        <member name="M:CoordinateSharp.Distance_Assistant.Direct_Ell(System.Double,System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Returns new geodetic coordinate in radians
            </summary>
            <param name="glat1">Latitude in Radians</param>
            <param name="glon1">Longitude in Radians</param>
            <param name="faz">Bearing</param>
            <param name="s">Distance</param>
            <param name="ellipse">Earth Ellipse Values</param>
            <returns>double[]</returns>
        </member>
        <member name="M:CoordinateSharp.Distance_Assistant.Direct(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns new geodetic coordinate in radians
            </summary>
            <param name="lat1">Latitude in radians</param>
            <param name="lon1">Longitude in radians</param>
            <param name="crs12">Bearing</param>
            <param name="d12">Distance</param>
            <returns>double[]</returns>
        </member>
        <member name="T:CoordinateSharp.GeoFence">
            <summary>
            Geo Fence class. It helps to check if points/coordinates are inside a polygon, 
            Next to a polyline, and counting...
            </summary>
        </member>
        <member name="M:CoordinateSharp.GeoFence.#ctor(System.Collections.Generic.List{CoordinateSharp.GeoFence.Point})">
            <summary>
            Prepare GeoFence with a list of points
            </summary>
            <param name="points">List of points</param>
        </member>
        <member name="M:CoordinateSharp.GeoFence.#ctor(System.Collections.Generic.List{CoordinateSharp.Coordinate})">
            <summary>
            Prepare Geofence with a list of coordinates
            </summary>
            <param name="coordinates">List of coordinates</param>
        </member>
        <member name="M:CoordinateSharp.GeoFence.IsPointInPolygon(CoordinateSharp.Coordinate)">
            <summary>
            The function will return true if the point x,y is inside the polygon, or
            false if it is not.  If the point is exactly on the edge of the polygon,
            then the function may return true or false.
            </summary>
            <param name="point">The point to test</param>
            <returns>bool</returns>
        </member>
        <member name="M:CoordinateSharp.GeoFence.IsPointInRangeOfLine(CoordinateSharp.Coordinate,System.Double)">
            <summary>
            The function will return true if the point x,y is next the given range of 
            the polyline, or false if it is not.
            </summary>
            <param name="point">The point to test</param>
            <param name="range">The range in meters</param>
            <returns>bool</returns>
        </member>
        <member name="M:CoordinateSharp.GeoFence.IsPointInRangeOfLine(CoordinateSharp.Coordinate,CoordinateSharp.Distance)">
            <summary>
            The function will return true if the point x,y is next the given range of 
            the polyline, or false if it is not.
            </summary>
            <param name="point">The point to test</param>
            <param name="range">The range is a distance object</param>
            <returns>bool</returns>
        </member>
        <member name="T:CoordinateSharp.GeoFence.Point">
            <summary>
            This class is a help class to simplify GeoFence calculus
            </summary>
        </member>
        <member name="M:CoordinateSharp.GeoFence.Point.#ctor">
            <summary>
            Initialize empty point
            </summary>
        </member>
        <member name="M:CoordinateSharp.GeoFence.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initialize point with defined Latitude and Longitude
            </summary>
            <param name="lat">Latitude (signed)</param>
            <param name="lng">Longitude (signed)</param>
        </member>
        <member name="F:CoordinateSharp.GeoFence.Point.Longitude">
            <summary>
            The longitude in degrees
            </summary>
        </member>
        <member name="F:CoordinateSharp.GeoFence.Point.Latitude">
            <summary>
            The latitude in degrees
            </summary>
        </member>
    </members>
</doc>
